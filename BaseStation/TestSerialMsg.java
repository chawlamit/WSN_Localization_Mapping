/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'TestSerialMsg'
 * message type.
 */

public class TestSerialMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 11;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 11;

    /** Create a new TestSerialMsg of size 11. */
    public TestSerialMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new TestSerialMsg of the given data_length. */
    public TestSerialMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg with the given data_length
     * and base offset.
     */
    public TestSerialMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg using the given byte array
     * as backing store.
     */
    public TestSerialMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public TestSerialMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public TestSerialMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg embedded in the given message
     * at the given base offset.
     */
    public TestSerialMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestSerialMsg embedded in the given message
     * at the given base offset and length.
     */
    public TestSerialMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <TestSerialMsg> \n";
      try {
        s += "  [nodeId=0x"+Long.toHexString(get_nodeId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [loc.x="+Float.toString(get_loc_x())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [loc.y="+Float.toString(get_loc_y())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [roomId=0x"+Long.toHexString(get_roomId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [quad=0x"+Long.toHexString(get_quad())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nodeId
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nodeId' is signed (false).
     */
    public static boolean isSigned_nodeId() {
        return false;
    }

    /**
     * Return whether the field 'nodeId' is an array (false).
     */
    public static boolean isArray_nodeId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nodeId'
     */
    public static int offset_nodeId() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nodeId'
     */
    public static int offsetBits_nodeId() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'nodeId'
     */
    public short get_nodeId() {
        return (short)getUIntBEElement(offsetBits_nodeId(), 8);
    }

    /**
     * Set the value of the field 'nodeId'
     */
    public void set_nodeId(short value) {
        setUIntBEElement(offsetBits_nodeId(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'nodeId'
     */
    public static int size_nodeId() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nodeId'
     */
    public static int sizeBits_nodeId() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: loc.x
    //   Field type: float, unsigned
    //   Offset (bits): 8
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'loc.x' is signed (false).
     */
    public static boolean isSigned_loc_x() {
        return false;
    }

    /**
     * Return whether the field 'loc.x' is an array (false).
     */
    public static boolean isArray_loc_x() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'loc.x'
     */
    public static int offset_loc_x() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'loc.x'
     */
    public static int offsetBits_loc_x() {
        return 8;
    }

    /**
     * Return the value (as a float) of the field 'loc.x'
     */
    public float get_loc_x() {
        return (float)getFloatElement(offsetBits_loc_x(), 32);
    }

    /**
     * Set the value of the field 'loc.x'
     */
    public void set_loc_x(float value) {
        setFloatElement(offsetBits_loc_x(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'loc.x'
     */
    public static int size_loc_x() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'loc.x'
     */
    public static int sizeBits_loc_x() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: loc.y
    //   Field type: float, unsigned
    //   Offset (bits): 40
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'loc.y' is signed (false).
     */
    public static boolean isSigned_loc_y() {
        return false;
    }

    /**
     * Return whether the field 'loc.y' is an array (false).
     */
    public static boolean isArray_loc_y() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'loc.y'
     */
    public static int offset_loc_y() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'loc.y'
     */
    public static int offsetBits_loc_y() {
        return 40;
    }

    /**
     * Return the value (as a float) of the field 'loc.y'
     */
    public float get_loc_y() {
        return (float)getFloatElement(offsetBits_loc_y(), 32);
    }

    /**
     * Set the value of the field 'loc.y'
     */
    public void set_loc_y(float value) {
        setFloatElement(offsetBits_loc_y(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'loc.y'
     */
    public static int size_loc_y() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'loc.y'
     */
    public static int sizeBits_loc_y() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: roomId
    //   Field type: short, unsigned
    //   Offset (bits): 72
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'roomId' is signed (false).
     */
    public static boolean isSigned_roomId() {
        return false;
    }

    /**
     * Return whether the field 'roomId' is an array (false).
     */
    public static boolean isArray_roomId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'roomId'
     */
    public static int offset_roomId() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'roomId'
     */
    public static int offsetBits_roomId() {
        return 72;
    }

    /**
     * Return the value (as a short) of the field 'roomId'
     */
    public short get_roomId() {
        return (short)getUIntBEElement(offsetBits_roomId(), 8);
    }

    /**
     * Set the value of the field 'roomId'
     */
    public void set_roomId(short value) {
        setUIntBEElement(offsetBits_roomId(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'roomId'
     */
    public static int size_roomId() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'roomId'
     */
    public static int sizeBits_roomId() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: quad
    //   Field type: short, unsigned
    //   Offset (bits): 80
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'quad' is signed (false).
     */
    public static boolean isSigned_quad() {
        return false;
    }

    /**
     * Return whether the field 'quad' is an array (false).
     */
    public static boolean isArray_quad() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'quad'
     */
    public static int offset_quad() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'quad'
     */
    public static int offsetBits_quad() {
        return 80;
    }

    /**
     * Return the value (as a short) of the field 'quad'
     */
    public short get_quad() {
        return (short)getUIntBEElement(offsetBits_quad(), 8);
    }

    /**
     * Set the value of the field 'quad'
     */
    public void set_quad(short value) {
        setUIntBEElement(offsetBits_quad(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'quad'
     */
    public static int size_quad() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'quad'
     */
    public static int sizeBits_quad() {
        return 8;
    }

}
